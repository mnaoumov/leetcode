namespace LeetCode.Problems._0928_Minimize_Malware_Spread_II;

/// <summary>
/// https://leetcode.com/submissions/detail/935007524/
/// </summary>
[UsedImplicitly]
[SkipSolution(SkipSolutionReason.WrongAnswer)]
public class Solution1 : ISolution
{
    public int MinMalwareSpread(int[][] graph, int[] initial)
    {
        var n = graph.Length;
        var adjNodes = graph.Select(row => Enumerable.Range(0, n).Where(i => row[i] == 1).ToArray()).ToArray();
        return Enumerable.Range(0, initial.Length).GroupBy(InfectedNum).MinBy(g => g.Key)!
            .Select(index => initial[index]).Min();

        int InfectedNum(int skipIndex)
        {
            var uf = new UnionFind<int>();
            const int infectedFakeNode = -1;

            for (var i = 0; i < n; i++)
            {
                if (i == skipIndex)
                {
                    continue;
                }

                foreach (var adjNode in adjNodes[i])
                {
                    if (adjNode == skipIndex)
                    {
                        continue;
                    }

                    uf.Union(i, adjNode);
                }
            }

            for (var i = 0; i < initial.Length; i++)
            {
                if (i == skipIndex)
                {
                    continue;
                }

                uf.Union(infectedFakeNode, initial[i]);
            }

            var result = 0;

            for (var i = 0; i < n; i++)
            {
                if (uf.Connected(infectedFakeNode, i))
                {
                    result++;
                }
            }

            return result;
        }
    }

    private class UnionFind<T> where T : IEquatable<T>
    {
        private readonly Dictionary<T, T> _roots = new();
        private readonly Dictionary<T, int> _ranks = new();

        private T Find(T x) => _roots.GetValueOrDefault(x, x).Equals(x) ? x : _roots[x] = Find(_roots[x]);

        public void Union(T x, T y)
        {
            var rootX = Find(x);
            var rootY = Find(y);

            if (rootX.Equals(rootY))
            {
                return;
            }

            var rankX = GetRank(rootX);
            var rankY = GetRank(rootY);

            if (rankX < rankY)
            {
                _roots[rootX] = rootY;
            }
            else if (rankX > rankY)
            {
                _roots[rootY] = rootX;
            }
            else
            {
                _roots[rootX] = rootY;
                _ranks[rootY] = rankY + 1;
            }
        }

        private int GetRank(T x) => _ranks.GetValueOrDefault(x, 1);

        public bool Connected(T x, T y) => Find(x).Equals(Find(y));
    }
}
